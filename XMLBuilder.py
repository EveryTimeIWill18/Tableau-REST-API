import requests
import xml.etree.ElementTree as ET
import re
from datetime import date, datetime, timedelta
from pprint import pprint
from collections import *




URLS = {"sing_in": '/api/{2.6}/auth/signin',
        "sign_out": '/api/{2.6}/auth/signout',
        "publish workbook": '/api/{2.6}/sites/{site_id}/workbooks/{workbook_id}',
        "download workbook": '/api/{2.6}/sites/{site_id}/workbooks/{workbook_id}/content'}

AUTHENTICATION = {"sing_in":  '/api/{2.6}/auth/signin',
                  "sign_out": '/api/{2.6}/auth/signout'}
SITES = {"query": 'api/{2.6}/sites/{site_id}'}

PROJECTS = {"query": '/api/{2.6}/sites/{site_id}/projects'}

WORKBOOKS = {"query": '',
             "publish": '/api/{2.6}/sites/{site_id}/workbooks/{workbook_id}',
             "download": '/api/{2.6}/sites/{site_id}/workbooks/{workbook_id}/content'}


class AuthTokens:
    """storage class that holds (id,token) tuples"""

    LOGIN     = dict()
    LOGOUT    = dict()
    SITES     = dict()
    PROJECTS  = dict()
    WORKBOOKS = dict()


class TableauServerLogging:
    """memory class to store all logging information
    that is generated by the Tableau REST requests"""

    LOGGING = dict()

    def update_logging_data(*args, **kwargs):
        """add data to the logger"""
        temp_log_ = dict(*args, **kwargs)
        __class__.LOGGING.update(temp_log_)



class XmlBuilder(object):
    """xml builder class"""
    logger = TableauServerLogging()


    def __init__(self, url, version):
        self.sign_in_xml = None
        self.is_logged_in = False
        self.current_xml_request = None
        self.url_ = url.__str__()
        self.version_ = version.__str__()
        self.current_url_ = "http://{}/api/{}/auth/signin".format(self.url_, self.version_)
        self.xmlns = {'t': 'http://tableau.com/api'}

        self.server_response = None
        self.encoded_server_response = None
        self.status = None
        self.auth_token = None
        self.id = None
        self.uid = None
        self.temp_url = None
        self.project_information = None
        self.un = None
        self.pw = None

        # --- workbook data
        self.workbooks = list()



        # --- storage classes
        self.login = AuthTokens.LOGIN
        self.logout = AuthTokens.LOGOUT
        self.sites = AuthTokens.SITES
        self.projects = AuthTokens.PROJECTS
        self.workbooks = AuthTokens.WORKBOOKS


    def sign_in(self, un: str, pw: str, *args, **kwargs):
        """sign into the server"""
        signin_url = "http://{}/api/{}/auth/signin".format(self.url_, self.version_)
        #print("url {}".format(signin_url))
        xml_request = ET.Element('tsRequest')
        credentials = ET.SubElement(xml_request, 'credentials',
                                    name=un, password=pw)
        ET.SubElement(credentials, 'site', contentUrl='')
        self.sign_in_xml = ET.tostring(xml_request)
        try:
            # --- post a login request
            server_response = requests.post(signin_url, self.sign_in_xml)
            if server_response.status_code == 200:
                self.is_logged_in = True
                self.un = un
                self.pw = pw
                print("Login Successful: status:[{}]".format(server_response.status_code))

                # --- convert to a usable format for server
                text_response = server_response.text
                encoded_response = (str(text_response).encode('ascii', errors='backslashreplace').decode('utf-8'))
                parsed_response = ET.fromstring(encoded_response)

                # --- grab needed authorization tokens
                self.auth_token = parsed_response.find('t:credentials', namespaces=self.xmlns).get('token')
                self.id = parsed_response.find('.//t:site', namespaces=self.xmlns).get('id')
                self.uid = parsed_response.find('.//t:user', namespaces=self.xmlns).get('id')
                print(self.id)
                self.login.update({"id": id, "token": self.auth_token})
            else:
                raise Exception("Login Failed: status code: [{}]".format(server_response.status_code))
        except Exception as e:
            print(str(e))






    def sign_out(self, *args, **kwargs):
        """sign out of the server"""
        signout_url = "http://{}/api/{}/auth/signout".format(self.url_, self.version_)
        print(signout_url)
        # --- get auth token
        try:
            srvr_response = requests.post(signout_url,
                                          headers={'x-tableau-auth': self.auth_token})
            if srvr_response.status_code == 204:
                print("Logout Successful: status:[{}]".format(srvr_response.status_code))
                self.logout.update({"id": self.login.get("id"), "token": self.login.get("token")})
            else:
                raise Exception("Logout Failed: status:[{}]".format(srvr_response.status_code))
        except Exception as e:
            print(str(e))

    def query_workbooks(self, workbook_name):
        """returns workbook information"""

        workbook_url = "http://{}/api/{}/sites/{}/users/{}/workbooks".format(self.url_,
                                                                      self.version_,
                                                                      self.id,
                                                                      self.uid)
        server_response = requests.get(workbook_url, headers={'x-tableau-auth': self.auth_token})
        text_response = server_response.text
        encoded_response = (str(text_response).encode('ascii', errors='backslashreplace').decode('utf-8'))

        try:
            if server_response.status_code == 200:
                print("Connected to Workbooks: response[{}]".format(server_response.status_code))
                xml_response = ET.fromstring(encoded_response)
                self.workbooks = xml_response.findall('.//t:workbook', namespaces=self.xmlns)
                for wb in self.workbooks:
                    print(wb.get('name'), wb.get('id'))
            else:
                raise Exception("Error connecting to workbooks: response[{}]".format(server_response))
        except Exception as e:
            print(str(e))

    def download_workbook(self, un: str, pw: str):
        """get workbook"""
        workbook_url ="/api/{}/sites/{}/users/workbooks".format(self.version_, un, pw)









    def build_xml(self, login: bool, *args, **kwargs):
        """Builds the xml framework for the Tableau REST API"""
        xml_request = ET.Element('tsRequest')
        if login is True:
            credentials = ET.SubElement(xml_request, 'credentials',
                                        name=list(kwargs.values())[0],
                                        password=list(kwargs.values())[1])
            ET.SubElement(credentials, 'site', contentUrl='')
            self.current_xml_request = ET.tostring(xml_request)
        else:
            for a in args:
                ET.SubElement(xml_request, a.__str__())
            self.current_xml_request = ET.tostring(xml_request)




    def make_request(self):
        """make a request to the Tableau REST API"""
        self.server_response = requests.post(self.current_url_, self.current_xml_request)
        self.status = self.server_response.status_code

    def get_token(self):
        """get auth token"""
        text_response = self.server_response.text
        self.encoded_server_response = str(text_response).encode('ascii', errors="backslashreplace").decode('utf-8')
        parsed_response = ET.fromstring(self.encoded_server_response)
        self.auth_token = parsed_response.find('t:credentials', namespaces=self.xmlns).get('token')
        self.id = parsed_response.find('.//t:site', namespaces=self.xmlns).get('id')
        #user_id = parsed_response.find('.//t:site', namespaces=self.xmlns).get('id')
        #print("id: {}".format(self.id))
        #print("user id: {}".format(user_id))





    def query_projects(self):
        """returns a list of projects"""
        self.temp_url = "http://" + self.url_ + " /api/{}/sites/{}/projects".format(self.version_, self.id)
        paged_url = "http://" + self.url_ + "?pageSize={0}&pageNumber={1}".format(1, 100)
        print(paged_url)
        print(self.temp_url)
        srvr_response = requests.get(paged_url, headers={'x-tableau-auth': self.auth_token})
        text_resp = srvr_response.text

        #encoded_text_resp = str(text_resp).encode('ascii', errors="backslashreplace").decode('utf-8')
        #xml_resp = ET.fromstring(encoded_text_resp)
        #self.project_information = xml_resp









if __name__=="__main__":
    xml = XmlBuilder(url='', version=2.6)
    #xml.build_xml(True, name='y', password='')
    xml.sign_in(un='', pw='')
   # xml.get_token()
   # print(xml.download_workbook(un="", pw=""))
    xml.query_workbooks("")
    #xml.sign_out()

    #xml.make_request()
    #print(xml.status)
    #xml.get_token()
    #print(xml.auth_token)
    #print(xml.id)
    #xml.query_projects()
    """
    def sign_out(self):
        self.temp_url = "http://" + self.url_ + "/api/{}/auth/signout".format(self.version_)
        srvr_response = requests.post(self.temp_url, headers={'x-tableau-auth': self.auth_token})
        self.status = srvr_response.status_code"""
